// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dpdkproto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DPDKonmetalClient is the client API for DPDKonmetal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DPDKonmetalClient interface {
	// // INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	CheckInitialized(ctx context.Context, in *CheckInitializedRequest, opts ...grpc.CallOption) (*CheckInitializedResponse, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// // VERSIONING
	// Exchange protocol/app versions to establish communication
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// // INTERFACES
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// CreateInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling CreateInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use ListRoutes and AddRoute as required).
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error)
	// DeleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error)
	// ListPrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListPrefixes(ctx context.Context, in *ListPrefixesRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error)
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error)
	DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error)
	// LoadBalancerTargetPrefix(es) are similar to Prefixes but used for LoadBalancing purposes
	ListLoadBalancerPrefixes(ctx context.Context, in *ListLoadBalancerPrefixesRequest, opts ...grpc.CallOption) (*ListLoadBalancerPrefixesResponse, error)
	CreateLoadBalancerPrefix(ctx context.Context, in *CreateLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*CreateLoadBalancerPrefixResponse, error)
	DeleteLoadBalancerPrefix(ctx context.Context, in *DeleteLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerPrefixResponse, error)
	// Nat related, add/get/del Virtual IP for a given Interface
	CreateVip(ctx context.Context, in *CreateVipRequest, opts ...grpc.CallOption) (*CreateVipResponse, error)
	GetVip(ctx context.Context, in *GetVipRequest, opts ...grpc.CallOption) (*GetVipResponse, error)
	DeleteVip(ctx context.Context, in *DeleteVipRequest, opts ...grpc.CallOption) (*DeleteVipResponse, error)
	// create/list/del Loadbalancer for a given IP to be loadbalanced
	CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error)
	GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error)
	DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerResponse, error)
	ListLoadBalancers(ctx context.Context, in *ListLoadBalancersRequest, opts ...grpc.CallOption) (*ListLoadBalancersResponse, error)
	// create/list/del Loadbalancer Targets for a given Loadbalancer ID
	CreateLoadBalancerTarget(ctx context.Context, in *CreateLoadBalancerTargetRequest, opts ...grpc.CallOption) (*CreateLoadBalancerTargetResponse, error)
	ListLoadBalancerTargets(ctx context.Context, in *ListLoadBalancerTargetsRequest, opts ...grpc.CallOption) (*ListLoadBalancerTargetsResponse, error)
	DeleteLoadBalancerTarget(ctx context.Context, in *DeleteLoadBalancerTargetRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerTargetResponse, error)
	// Network-Nat related, add/del/get a Nat for an interface
	CreateNat(ctx context.Context, in *CreateNatRequest, opts ...grpc.CallOption) (*CreateNatResponse, error)
	GetNat(ctx context.Context, in *GetNatRequest, opts ...grpc.CallOption) (*GetNatResponse, error)
	DeleteNat(ctx context.Context, in *DeleteNatRequest, opts ...grpc.CallOption) (*DeleteNatResponse, error)
	ListLocalNats(ctx context.Context, in *ListLocalNatsRequest, opts ...grpc.CallOption) (*ListLocalNatsResponse, error)
	CreateNeighborNat(ctx context.Context, in *CreateNeighborNatRequest, opts ...grpc.CallOption) (*CreateNeighborNatResponse, error)
	DeleteNeighborNat(ctx context.Context, in *DeleteNeighborNatRequest, opts ...grpc.CallOption) (*DeleteNeighborNatResponse, error)
	ListNeighborNats(ctx context.Context, in *ListNeighborNatsRequest, opts ...grpc.CallOption) (*ListNeighborNatsResponse, error)
	// // ROUTES
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// CreateRoute adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	// DeleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	// VNI internal state information
	// VNI can be in use by interfaces and by loadbalancer. So get information
	// whether the VNI in question is in use or not.
	CheckVniInUse(ctx context.Context, in *CheckVniInUseRequest, opts ...grpc.CallOption) (*CheckVniInUseResponse, error)
	ResetVni(ctx context.Context, in *ResetVniRequest, opts ...grpc.CallOption) (*ResetVniResponse, error)
	// // FIREWALL
	ListFirewallRules(ctx context.Context, in *ListFirewallRulesRequest, opts ...grpc.CallOption) (*ListFirewallRulesResponse, error)
	CreateFirewallRule(ctx context.Context, in *CreateFirewallRuleRequest, opts ...grpc.CallOption) (*CreateFirewallRuleResponse, error)
	GetFirewallRule(ctx context.Context, in *GetFirewallRuleRequest, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteFirewallRuleResponse, error)
	// // PACKET CAPTURE
	CaptureStart(ctx context.Context, in *CaptureStartRequest, opts ...grpc.CallOption) (*CaptureStartResponse, error)
	CaptureStop(ctx context.Context, in *CaptureStopRequest, opts ...grpc.CallOption) (*CaptureStopResponse, error)
	CaptureStatus(ctx context.Context, in *CaptureStatusRequest, opts ...grpc.CallOption) (*CaptureStatusResponse, error)
}

type dPDKonmetalClient struct {
	cc grpc.ClientConnInterface
}

func NewDPDKonmetalClient(cc grpc.ClientConnInterface) DPDKonmetalClient {
	return &dPDKonmetalClient{cc}
}

func (c *dPDKonmetalClient) CheckInitialized(ctx context.Context, in *CheckInitializedRequest, opts ...grpc.CallOption) (*CheckInitializedResponse, error) {
	out := new(CheckInitializedResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CheckInitialized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error) {
	out := new(CreateInterfaceResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error) {
	out := new(DeleteInterfaceResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListPrefixes(ctx context.Context, in *ListPrefixesRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error) {
	out := new(ListPrefixesResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error) {
	out := new(CreatePrefixResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreatePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error) {
	out := new(DeletePrefixResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeletePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListLoadBalancerPrefixes(ctx context.Context, in *ListLoadBalancerPrefixesRequest, opts ...grpc.CallOption) (*ListLoadBalancerPrefixesResponse, error) {
	out := new(ListLoadBalancerPrefixesResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancerPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateLoadBalancerPrefix(ctx context.Context, in *CreateLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*CreateLoadBalancerPrefixResponse, error) {
	out := new(CreateLoadBalancerPrefixResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancerPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteLoadBalancerPrefix(ctx context.Context, in *DeleteLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerPrefixResponse, error) {
	out := new(DeleteLoadBalancerPrefixResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancerPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateVip(ctx context.Context, in *CreateVipRequest, opts ...grpc.CallOption) (*CreateVipResponse, error) {
	out := new(CreateVipResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetVip(ctx context.Context, in *GetVipRequest, opts ...grpc.CallOption) (*GetVipResponse, error) {
	out := new(GetVipResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteVip(ctx context.Context, in *DeleteVipRequest, opts ...grpc.CallOption) (*DeleteVipResponse, error) {
	out := new(DeleteVipResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error) {
	out := new(CreateLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error) {
	out := new(GetLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerResponse, error) {
	out := new(DeleteLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListLoadBalancers(ctx context.Context, in *ListLoadBalancersRequest, opts ...grpc.CallOption) (*ListLoadBalancersResponse, error) {
	out := new(ListLoadBalancersResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateLoadBalancerTarget(ctx context.Context, in *CreateLoadBalancerTargetRequest, opts ...grpc.CallOption) (*CreateLoadBalancerTargetResponse, error) {
	out := new(CreateLoadBalancerTargetResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancerTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListLoadBalancerTargets(ctx context.Context, in *ListLoadBalancerTargetsRequest, opts ...grpc.CallOption) (*ListLoadBalancerTargetsResponse, error) {
	out := new(ListLoadBalancerTargetsResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancerTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteLoadBalancerTarget(ctx context.Context, in *DeleteLoadBalancerTargetRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerTargetResponse, error) {
	out := new(DeleteLoadBalancerTargetResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancerTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateNat(ctx context.Context, in *CreateNatRequest, opts ...grpc.CallOption) (*CreateNatResponse, error) {
	out := new(CreateNatResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateNat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetNat(ctx context.Context, in *GetNatRequest, opts ...grpc.CallOption) (*GetNatResponse, error) {
	out := new(GetNatResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetNat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteNat(ctx context.Context, in *DeleteNatRequest, opts ...grpc.CallOption) (*DeleteNatResponse, error) {
	out := new(DeleteNatResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteNat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListLocalNats(ctx context.Context, in *ListLocalNatsRequest, opts ...grpc.CallOption) (*ListLocalNatsResponse, error) {
	out := new(ListLocalNatsResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListLocalNats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateNeighborNat(ctx context.Context, in *CreateNeighborNatRequest, opts ...grpc.CallOption) (*CreateNeighborNatResponse, error) {
	out := new(CreateNeighborNatResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateNeighborNat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteNeighborNat(ctx context.Context, in *DeleteNeighborNatRequest, opts ...grpc.CallOption) (*DeleteNeighborNatResponse, error) {
	out := new(DeleteNeighborNatResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteNeighborNat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListNeighborNats(ctx context.Context, in *ListNeighborNatsRequest, opts ...grpc.CallOption) (*ListNeighborNatsResponse, error) {
	out := new(ListNeighborNatsResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListNeighborNats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CheckVniInUse(ctx context.Context, in *CheckVniInUseRequest, opts ...grpc.CallOption) (*CheckVniInUseResponse, error) {
	out := new(CheckVniInUseResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CheckVniInUse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ResetVni(ctx context.Context, in *ResetVniRequest, opts ...grpc.CallOption) (*ResetVniResponse, error) {
	out := new(ResetVniResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ResetVni", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListFirewallRules(ctx context.Context, in *ListFirewallRulesRequest, opts ...grpc.CallOption) (*ListFirewallRulesResponse, error) {
	out := new(ListFirewallRulesResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/ListFirewallRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateFirewallRule(ctx context.Context, in *CreateFirewallRuleRequest, opts ...grpc.CallOption) (*CreateFirewallRuleResponse, error) {
	out := new(CreateFirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CreateFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetFirewallRule(ctx context.Context, in *GetFirewallRuleRequest, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error) {
	out := new(GetFirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/GetFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteFirewallRuleResponse, error) {
	out := new(DeleteFirewallRuleResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/DeleteFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CaptureStart(ctx context.Context, in *CaptureStartRequest, opts ...grpc.CallOption) (*CaptureStartResponse, error) {
	out := new(CaptureStartResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CaptureStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CaptureStop(ctx context.Context, in *CaptureStopRequest, opts ...grpc.CallOption) (*CaptureStopResponse, error) {
	out := new(CaptureStopResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CaptureStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CaptureStatus(ctx context.Context, in *CaptureStatusRequest, opts ...grpc.CallOption) (*CaptureStatusResponse, error) {
	out := new(CaptureStatusResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.v1.DPDKonmetal/CaptureStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPDKonmetalServer is the server API for DPDKonmetal service.
// All implementations must embed UnimplementedDPDKonmetalServer
// for forward compatibility
type DPDKonmetalServer interface {
	// // INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	CheckInitialized(context.Context, *CheckInitializedRequest) (*CheckInitializedResponse, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// // VERSIONING
	// Exchange protocol/app versions to establish communication
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// // INTERFACES
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error)
	// CreateInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling CreateInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use ListRoutes and AddRoute as required).
	CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error)
	// DeleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error)
	// ListPrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListPrefixes(context.Context, *ListPrefixesRequest) (*ListPrefixesResponse, error)
	CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error)
	DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error)
	// LoadBalancerTargetPrefix(es) are similar to Prefixes but used for LoadBalancing purposes
	ListLoadBalancerPrefixes(context.Context, *ListLoadBalancerPrefixesRequest) (*ListLoadBalancerPrefixesResponse, error)
	CreateLoadBalancerPrefix(context.Context, *CreateLoadBalancerPrefixRequest) (*CreateLoadBalancerPrefixResponse, error)
	DeleteLoadBalancerPrefix(context.Context, *DeleteLoadBalancerPrefixRequest) (*DeleteLoadBalancerPrefixResponse, error)
	// Nat related, add/get/del Virtual IP for a given Interface
	CreateVip(context.Context, *CreateVipRequest) (*CreateVipResponse, error)
	GetVip(context.Context, *GetVipRequest) (*GetVipResponse, error)
	DeleteVip(context.Context, *DeleteVipRequest) (*DeleteVipResponse, error)
	// create/list/del Loadbalancer for a given IP to be loadbalanced
	CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error)
	GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*GetLoadBalancerResponse, error)
	DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*DeleteLoadBalancerResponse, error)
	ListLoadBalancers(context.Context, *ListLoadBalancersRequest) (*ListLoadBalancersResponse, error)
	// create/list/del Loadbalancer Targets for a given Loadbalancer ID
	CreateLoadBalancerTarget(context.Context, *CreateLoadBalancerTargetRequest) (*CreateLoadBalancerTargetResponse, error)
	ListLoadBalancerTargets(context.Context, *ListLoadBalancerTargetsRequest) (*ListLoadBalancerTargetsResponse, error)
	DeleteLoadBalancerTarget(context.Context, *DeleteLoadBalancerTargetRequest) (*DeleteLoadBalancerTargetResponse, error)
	// Network-Nat related, add/del/get a Nat for an interface
	CreateNat(context.Context, *CreateNatRequest) (*CreateNatResponse, error)
	GetNat(context.Context, *GetNatRequest) (*GetNatResponse, error)
	DeleteNat(context.Context, *DeleteNatRequest) (*DeleteNatResponse, error)
	ListLocalNats(context.Context, *ListLocalNatsRequest) (*ListLocalNatsResponse, error)
	CreateNeighborNat(context.Context, *CreateNeighborNatRequest) (*CreateNeighborNatResponse, error)
	DeleteNeighborNat(context.Context, *DeleteNeighborNatRequest) (*DeleteNeighborNatResponse, error)
	ListNeighborNats(context.Context, *ListNeighborNatsRequest) (*ListNeighborNatsResponse, error)
	// // ROUTES
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// CreateRoute adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	// DeleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	// VNI internal state information
	// VNI can be in use by interfaces and by loadbalancer. So get information
	// whether the VNI in question is in use or not.
	CheckVniInUse(context.Context, *CheckVniInUseRequest) (*CheckVniInUseResponse, error)
	ResetVni(context.Context, *ResetVniRequest) (*ResetVniResponse, error)
	// // FIREWALL
	ListFirewallRules(context.Context, *ListFirewallRulesRequest) (*ListFirewallRulesResponse, error)
	CreateFirewallRule(context.Context, *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error)
	GetFirewallRule(context.Context, *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error)
	// // PACKET CAPTURE
	CaptureStart(context.Context, *CaptureStartRequest) (*CaptureStartResponse, error)
	CaptureStop(context.Context, *CaptureStopRequest) (*CaptureStopResponse, error)
	CaptureStatus(context.Context, *CaptureStatusRequest) (*CaptureStatusResponse, error)
	mustEmbedUnimplementedDPDKonmetalServer()
}

// UnimplementedDPDKonmetalServer must be embedded to have forward compatible implementations.
type UnimplementedDPDKonmetalServer struct {
}

func (UnimplementedDPDKonmetalServer) CheckInitialized(context.Context, *CheckInitializedRequest) (*CheckInitializedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInitialized not implemented")
}
func (UnimplementedDPDKonmetalServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedDPDKonmetalServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDPDKonmetalServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedDPDKonmetalServer) GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) ListPrefixes(context.Context, *ListPrefixesRequest) (*ListPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrefixes not implemented")
}
func (UnimplementedDPDKonmetalServer) CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) ListLoadBalancerPrefixes(context.Context, *ListLoadBalancerPrefixesRequest) (*ListLoadBalancerPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerPrefixes not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateLoadBalancerPrefix(context.Context, *CreateLoadBalancerPrefixRequest) (*CreateLoadBalancerPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancerPrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteLoadBalancerPrefix(context.Context, *DeleteLoadBalancerPrefixRequest) (*DeleteLoadBalancerPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancerPrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateVip(context.Context, *CreateVipRequest) (*CreateVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVip not implemented")
}
func (UnimplementedDPDKonmetalServer) GetVip(context.Context, *GetVipRequest) (*GetVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVip not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteVip(context.Context, *DeleteVipRequest) (*DeleteVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVip not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancer not implemented")
}
func (UnimplementedDPDKonmetalServer) GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*GetLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancer not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*DeleteLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancer not implemented")
}
func (UnimplementedDPDKonmetalServer) ListLoadBalancers(context.Context, *ListLoadBalancersRequest) (*ListLoadBalancersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancers not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateLoadBalancerTarget(context.Context, *CreateLoadBalancerTargetRequest) (*CreateLoadBalancerTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancerTarget not implemented")
}
func (UnimplementedDPDKonmetalServer) ListLoadBalancerTargets(context.Context, *ListLoadBalancerTargetsRequest) (*ListLoadBalancerTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerTargets not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteLoadBalancerTarget(context.Context, *DeleteLoadBalancerTargetRequest) (*DeleteLoadBalancerTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancerTarget not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateNat(context.Context, *CreateNatRequest) (*CreateNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNat not implemented")
}
func (UnimplementedDPDKonmetalServer) GetNat(context.Context, *GetNatRequest) (*GetNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNat not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteNat(context.Context, *DeleteNatRequest) (*DeleteNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNat not implemented")
}
func (UnimplementedDPDKonmetalServer) ListLocalNats(context.Context, *ListLocalNatsRequest) (*ListLocalNatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalNats not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateNeighborNat(context.Context, *CreateNeighborNatRequest) (*CreateNeighborNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeighborNat not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteNeighborNat(context.Context, *DeleteNeighborNatRequest) (*DeleteNeighborNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeighborNat not implemented")
}
func (UnimplementedDPDKonmetalServer) ListNeighborNats(context.Context, *ListNeighborNatsRequest) (*ListNeighborNatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNeighborNats not implemented")
}
func (UnimplementedDPDKonmetalServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) CheckVniInUse(context.Context, *CheckVniInUseRequest) (*CheckVniInUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVniInUse not implemented")
}
func (UnimplementedDPDKonmetalServer) ResetVni(context.Context, *ResetVniRequest) (*ResetVniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVni not implemented")
}
func (UnimplementedDPDKonmetalServer) ListFirewallRules(context.Context, *ListFirewallRulesRequest) (*ListFirewallRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirewallRules not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateFirewallRule(context.Context, *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) GetFirewallRule(context.Context, *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) CaptureStart(context.Context, *CaptureStartRequest) (*CaptureStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStart not implemented")
}
func (UnimplementedDPDKonmetalServer) CaptureStop(context.Context, *CaptureStopRequest) (*CaptureStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStop not implemented")
}
func (UnimplementedDPDKonmetalServer) CaptureStatus(context.Context, *CaptureStatusRequest) (*CaptureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStatus not implemented")
}
func (UnimplementedDPDKonmetalServer) mustEmbedUnimplementedDPDKonmetalServer() {}

// UnsafeDPDKonmetalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DPDKonmetalServer will
// result in compilation errors.
type UnsafeDPDKonmetalServer interface {
	mustEmbedUnimplementedDPDKonmetalServer()
}

func RegisterDPDKonmetalServer(s *grpc.Server, srv DPDKonmetalServer) {
	s.RegisterService(&_DPDKonmetal_serviceDesc, srv)
}

func _DPDKonmetal_CheckInitialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInitializedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CheckInitialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CheckInitialized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CheckInitialized(ctx, req.(*CheckInitializedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListPrefixes(ctx, req.(*ListPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreatePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeletePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeletePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeletePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeletePrefix(ctx, req.(*DeletePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListLoadBalancerPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListLoadBalancerPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancerPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListLoadBalancerPrefixes(ctx, req.(*ListLoadBalancerPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateLoadBalancerPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateLoadBalancerPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancerPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateLoadBalancerPrefix(ctx, req.(*CreateLoadBalancerPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteLoadBalancerPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteLoadBalancerPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancerPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteLoadBalancerPrefix(ctx, req.(*DeleteLoadBalancerPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateVip(ctx, req.(*CreateVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetVip(ctx, req.(*GetVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteVip(ctx, req.(*DeleteVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateLoadBalancer(ctx, req.(*CreateLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetLoadBalancer(ctx, req.(*GetLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteLoadBalancer(ctx, req.(*DeleteLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListLoadBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListLoadBalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListLoadBalancers(ctx, req.(*ListLoadBalancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateLoadBalancerTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateLoadBalancerTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateLoadBalancerTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateLoadBalancerTarget(ctx, req.(*CreateLoadBalancerTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListLoadBalancerTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListLoadBalancerTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListLoadBalancerTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListLoadBalancerTargets(ctx, req.(*ListLoadBalancerTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteLoadBalancerTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteLoadBalancerTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteLoadBalancerTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteLoadBalancerTarget(ctx, req.(*DeleteLoadBalancerTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateNat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateNat(ctx, req.(*CreateNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetNat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetNat(ctx, req.(*GetNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteNat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteNat(ctx, req.(*DeleteNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListLocalNats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalNatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListLocalNats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListLocalNats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListLocalNats(ctx, req.(*ListLocalNatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateNeighborNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNeighborNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateNeighborNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateNeighborNat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateNeighborNat(ctx, req.(*CreateNeighborNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteNeighborNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNeighborNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteNeighborNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteNeighborNat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteNeighborNat(ctx, req.(*DeleteNeighborNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListNeighborNats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNeighborNatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListNeighborNats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListNeighborNats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListNeighborNats(ctx, req.(*ListNeighborNatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CheckVniInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVniInUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CheckVniInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CheckVniInUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CheckVniInUse(ctx, req.(*CheckVniInUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ResetVni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetVniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ResetVni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ResetVni",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ResetVni(ctx, req.(*ResetVniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListFirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirewallRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/ListFirewallRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, req.(*ListFirewallRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CreateFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateFirewallRule(ctx, req.(*CreateFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/GetFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetFirewallRule(ctx, req.(*GetFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/DeleteFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, req.(*DeleteFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CaptureStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CaptureStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CaptureStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CaptureStart(ctx, req.(*CaptureStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CaptureStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CaptureStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CaptureStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CaptureStop(ctx, req.(*CaptureStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CaptureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CaptureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.v1.DPDKonmetal/CaptureStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CaptureStatus(ctx, req.(*CaptureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DPDKonmetal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dpdkonmetal.v1.DPDKonmetal",
	HandlerType: (*DPDKonmetalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInitialized",
			Handler:    _DPDKonmetal_CheckInitialized_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _DPDKonmetal_Initialize_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DPDKonmetal_GetVersion_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _DPDKonmetal_ListInterfaces_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _DPDKonmetal_GetInterface_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _DPDKonmetal_CreateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _DPDKonmetal_DeleteInterface_Handler,
		},
		{
			MethodName: "ListPrefixes",
			Handler:    _DPDKonmetal_ListPrefixes_Handler,
		},
		{
			MethodName: "CreatePrefix",
			Handler:    _DPDKonmetal_CreatePrefix_Handler,
		},
		{
			MethodName: "DeletePrefix",
			Handler:    _DPDKonmetal_DeletePrefix_Handler,
		},
		{
			MethodName: "ListLoadBalancerPrefixes",
			Handler:    _DPDKonmetal_ListLoadBalancerPrefixes_Handler,
		},
		{
			MethodName: "CreateLoadBalancerPrefix",
			Handler:    _DPDKonmetal_CreateLoadBalancerPrefix_Handler,
		},
		{
			MethodName: "DeleteLoadBalancerPrefix",
			Handler:    _DPDKonmetal_DeleteLoadBalancerPrefix_Handler,
		},
		{
			MethodName: "CreateVip",
			Handler:    _DPDKonmetal_CreateVip_Handler,
		},
		{
			MethodName: "GetVip",
			Handler:    _DPDKonmetal_GetVip_Handler,
		},
		{
			MethodName: "DeleteVip",
			Handler:    _DPDKonmetal_DeleteVip_Handler,
		},
		{
			MethodName: "CreateLoadBalancer",
			Handler:    _DPDKonmetal_CreateLoadBalancer_Handler,
		},
		{
			MethodName: "GetLoadBalancer",
			Handler:    _DPDKonmetal_GetLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLoadBalancer",
			Handler:    _DPDKonmetal_DeleteLoadBalancer_Handler,
		},
		{
			MethodName: "ListLoadBalancers",
			Handler:    _DPDKonmetal_ListLoadBalancers_Handler,
		},
		{
			MethodName: "CreateLoadBalancerTarget",
			Handler:    _DPDKonmetal_CreateLoadBalancerTarget_Handler,
		},
		{
			MethodName: "ListLoadBalancerTargets",
			Handler:    _DPDKonmetal_ListLoadBalancerTargets_Handler,
		},
		{
			MethodName: "DeleteLoadBalancerTarget",
			Handler:    _DPDKonmetal_DeleteLoadBalancerTarget_Handler,
		},
		{
			MethodName: "CreateNat",
			Handler:    _DPDKonmetal_CreateNat_Handler,
		},
		{
			MethodName: "GetNat",
			Handler:    _DPDKonmetal_GetNat_Handler,
		},
		{
			MethodName: "DeleteNat",
			Handler:    _DPDKonmetal_DeleteNat_Handler,
		},
		{
			MethodName: "ListLocalNats",
			Handler:    _DPDKonmetal_ListLocalNats_Handler,
		},
		{
			MethodName: "CreateNeighborNat",
			Handler:    _DPDKonmetal_CreateNeighborNat_Handler,
		},
		{
			MethodName: "DeleteNeighborNat",
			Handler:    _DPDKonmetal_DeleteNeighborNat_Handler,
		},
		{
			MethodName: "ListNeighborNats",
			Handler:    _DPDKonmetal_ListNeighborNats_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _DPDKonmetal_ListRoutes_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _DPDKonmetal_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _DPDKonmetal_DeleteRoute_Handler,
		},
		{
			MethodName: "CheckVniInUse",
			Handler:    _DPDKonmetal_CheckVniInUse_Handler,
		},
		{
			MethodName: "ResetVni",
			Handler:    _DPDKonmetal_ResetVni_Handler,
		},
		{
			MethodName: "ListFirewallRules",
			Handler:    _DPDKonmetal_ListFirewallRules_Handler,
		},
		{
			MethodName: "CreateFirewallRule",
			Handler:    _DPDKonmetal_CreateFirewallRule_Handler,
		},
		{
			MethodName: "GetFirewallRule",
			Handler:    _DPDKonmetal_GetFirewallRule_Handler,
		},
		{
			MethodName: "DeleteFirewallRule",
			Handler:    _DPDKonmetal_DeleteFirewallRule_Handler,
		},
		{
			MethodName: "CaptureStart",
			Handler:    _DPDKonmetal_CaptureStart_Handler,
		},
		{
			MethodName: "CaptureStop",
			Handler:    _DPDKonmetal_CaptureStop_Handler,
		},
		{
			MethodName: "CaptureStatus",
			Handler:    _DPDKonmetal_CaptureStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dpdk.proto",
}
